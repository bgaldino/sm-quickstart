<?xml version="1.0" encoding="UTF-8"?>
<Flow xmlns="http://soap.sforce.com/2006/04/metadata">
    <actionCalls>
        <description>If the call to the Payment Sale API is successful, apply the payment to the invoice.</description>
        <name>ApplyPaymentToInvoice</name>
        <label>Apply Payment to Invoice</label>
        <locationX>138</locationX>
        <locationY>4214</locationY>
        <actionName>applyPayment</actionName>
        <actionType>applyPayment</actionType>
        <connector>
            <targetReference>Set_Original_Order_Id_on_Complete</targetReference>
        </connector>
        <flowTransactionModel>CurrentTransaction</flowTransactionModel>
        <inputParameters>
            <name>amount</name>
            <value>
                <elementReference>GetInvoiceRecords_0.Balance</elementReference>
            </value>
        </inputParameters>
        <inputParameters>
            <name>appliedToId</name>
            <value>
                <elementReference>GetInvoiceRecords_0.Id</elementReference>
            </value>
        </inputParameters>
        <inputParameters>
            <name>associatedAccountId</name>
            <value>
                <elementReference>GetInvoiceRecords_0.BillingAccountId</elementReference>
            </value>
        </inputParameters>
        <inputParameters>
            <name>paymentId</name>
            <value>
                <elementReference>PaymentCreationEvent.PaymentId</elementReference>
            </value>
        </inputParameters>
        <storeOutputAutomatically>true</storeOutputAutomatically>
    </actionCalls>
    <actionCalls>
        <description>Call the Payment Sale API. Charge the amount on the invoice to the payment method.</description>
        <name>ChargePaymentMethod</name>
        <label>Charge Payment Method</label>
        <locationX>666</locationX>
        <locationY>3854</locationY>
        <actionName>paymentSale</actionName>
        <actionType>paymentSale</actionType>
        <connector>
            <targetReference>WaitForPaymentCreationEvent</targetReference>
        </connector>
        <flowTransactionModel>CurrentTransaction</flowTransactionModel>
        <inputParameters>
            <name>accountId</name>
            <value>
                <elementReference>GetInvoiceRecords_0.BillingAccountId</elementReference>
            </value>
        </inputParameters>
        <inputParameters>
            <name>amount</name>
            <value>
                <elementReference>GetInvoiceRecords_0.Balance</elementReference>
            </value>
        </inputParameters>
        <inputParameters>
            <name>currencyIsoCode</name>
            <value>
                <stringValue>USD</stringValue>
            </value>
        </inputParameters>
        <inputParameters>
            <name>errorLogPrimaryRecordId</name>
            <value>
                <elementReference>GetInvoiceRecords_0.Id</elementReference>
            </value>
        </inputParameters>
        <inputParameters>
            <name>paymentGatewayId</name>
            <value>
                <elementReference>GatewayId</elementReference>
            </value>
        </inputParameters>
        <inputParameters>
            <name>paymentMethodId</name>
            <value>
                <elementReference>paymentMethodId</elementReference>
            </value>
        </inputParameters>
        <storeOutputAutomatically>true</storeOutputAutomatically>
    </actionCalls>
    <actionCalls>
        <description>Create the assets for the order products.</description>
        <name>CreateAssetsFromOrder</name>
        <label>Create Assets From Order</label>
        <locationX>2166</locationX>
        <locationY>1094</locationY>
        <actionName>createOrUpdateAssetFromOrder</actionName>
        <actionType>createOrUpdateAssetFromOrder</actionType>
        <connector>
            <targetReference>WaitForCreateAssetOrderEvent</targetReference>
        </connector>
        <flowTransactionModel>CurrentTransaction</flowTransactionModel>
        <inputParameters>
            <name>orderId</name>
            <value>
                <elementReference>recordId</elementReference>
            </value>
        </inputParameters>
        <storeOutputAutomatically>true</storeOutputAutomatically>
    </actionCalls>
    <actionCalls>
        <description>Create the billing schedule for the order products.</description>
        <name>CreateBillingSchedulesfromOrderProducts</name>
        <label>Create Billing Schedules from Order Products</label>
        <locationX>1386</locationX>
        <locationY>2342</locationY>
        <actionName>createBillingScheduleFromOrderItem</actionName>
        <actionType>createBillingScheduleFromOrderItem</actionType>
        <connector>
            <targetReference>WaitForBillingScheduleCreatedEvent</targetReference>
        </connector>
        <flowTransactionModel>CurrentTransaction</flowTransactionModel>
        <inputParameters>
            <name>orderItemIds</name>
            <value>
                <elementReference>OrderItemsIds</elementReference>
            </value>
        </inputParameters>
        <storeOutputAutomatically>true</storeOutputAutomatically>
    </actionCalls>
    <actionCalls>
        <description>Create the invoice for the billing schedules.</description>
        <name>CreateInvoice</name>
        <label>Create Invoice</label>
        <locationX>644</locationX>
        <locationY>3254</locationY>
        <actionName>createInvoiceFromOrder</actionName>
        <actionType>createInvoiceFromOrder</actionType>
        <connector>
            <targetReference>WaitForInvoiceProcessedEvent</targetReference>
        </connector>
        <flowTransactionModel>CurrentTransaction</flowTransactionModel>
        <inputParameters>
            <name>correlationId</name>
            <value>
                <elementReference>$Flow.InterviewGuid</elementReference>
            </value>
        </inputParameters>
        <inputParameters>
            <name>invoiceDate</name>
            <value>
                <elementReference>orderOutput.EffectiveDate</elementReference>
            </value>
        </inputParameters>
        <inputParameters>
            <name>invoiceStatus</name>
            <value>
                <stringValue>Posted</stringValue>
            </value>
        </inputParameters>
        <inputParameters>
            <name>orderId</name>
            <value>
                <elementReference>recordId</elementReference>
            </value>
        </inputParameters>
        <inputParameters>
            <name>targetDate</name>
            <value>
                <elementReference>orderOutput.EffectiveDate</elementReference>
            </value>
        </inputParameters>
        <storeOutputAutomatically>true</storeOutputAutomatically>
    </actionCalls>
    <actionCalls>
        <description>Send the email containing the errors from the Create Asset Order events.</description>
        <name>SendAssetOrderErrorEmail</name>
        <label>Send Asset Creation Error Email</label>
        <locationX>1986</locationX>
        <locationY>2126</locationY>
        <actionName>emailSimple</actionName>
        <actionType>emailSimple</actionType>
        <flowTransactionModel>CurrentTransaction</flowTransactionModel>
        <inputParameters>
            <name>emailBody</name>
            <value>
                <elementReference>EmailTemplateError</elementReference>
            </value>
        </inputParameters>
        <inputParameters>
            <name>emailAddresses</name>
            <value>
                <elementReference>$User.Email</elementReference>
            </value>
        </inputParameters>
        <inputParameters>
            <name>sendRichBody</name>
            <value>
                <booleanValue>true</booleanValue>
            </value>
        </inputParameters>
        <inputParameters>
            <name>emailSubject</name>
            <value>
                <elementReference>AssetOrderErrorEmailSubject</elementReference>
            </value>
        </inputParameters>
    </actionCalls>
    <actionCalls>
        <description>Send the email containing all the errors from the billing schedule events.</description>
        <name>SendBillingScheduleErrorEmail</name>
        <label>Send Billing Schedule Error Email</label>
        <locationX>1194</locationX>
        <locationY>3374</locationY>
        <actionName>emailSimple</actionName>
        <actionType>emailSimple</actionType>
        <flowTransactionModel>CurrentTransaction</flowTransactionModel>
        <inputParameters>
            <name>emailBody</name>
            <value>
                <elementReference>EmailTemplateError</elementReference>
            </value>
        </inputParameters>
        <inputParameters>
            <name>emailAddresses</name>
            <value>
                <elementReference>$User.Email</elementReference>
            </value>
        </inputParameters>
        <inputParameters>
            <name>sendRichBody</name>
            <value>
                <booleanValue>true</booleanValue>
            </value>
        </inputParameters>
        <inputParameters>
            <name>emailSubject</name>
            <value>
                <elementReference>BillingScheduleErrorEmailSubject</elementReference>
            </value>
        </inputParameters>
    </actionCalls>
    <actionCalls>
        <description>Send the email indicating that the transaction is complete.</description>
        <name>SendCompletedEmail</name>
        <label>Send Completed Email</label>
        <locationX>138</locationX>
        <locationY>4694</locationY>
        <actionName>emailSimple</actionName>
        <actionType>emailSimple</actionType>
        <connector>
            <targetReference>IterateOverInvoices</targetReference>
        </connector>
        <flowTransactionModel>CurrentTransaction</flowTransactionModel>
        <inputParameters>
            <name>emailBody</name>
            <value>
                <elementReference>EmailTemplateCompleted</elementReference>
            </value>
        </inputParameters>
        <inputParameters>
            <name>emailAddresses</name>
            <value>
                <elementReference>$User.Email</elementReference>
            </value>
        </inputParameters>
        <inputParameters>
            <name>sendRichBody</name>
            <value>
                <booleanValue>true</booleanValue>
            </value>
        </inputParameters>
        <inputParameters>
            <name>emailSubject</name>
            <value>
                <stringValue>Salesforce Buy Now completed</stringValue>
            </value>
        </inputParameters>
    </actionCalls>
    <actionCalls>
        <description>Send the email containing the invoice error information.</description>
        <name>SendInvoiceErrorEmail</name>
        <label>Send Invoice Error Email</label>
        <locationX>402</locationX>
        <locationY>4646</locationY>
        <actionName>emailSimple</actionName>
        <actionType>emailSimple</actionType>
        <flowTransactionModel>CurrentTransaction</flowTransactionModel>
        <inputParameters>
            <name>emailBody</name>
            <value>
                <elementReference>EmailTemplateError</elementReference>
            </value>
        </inputParameters>
        <inputParameters>
            <name>emailAddresses</name>
            <value>
                <elementReference>$User.Email</elementReference>
            </value>
        </inputParameters>
        <inputParameters>
            <name>sendRichBody</name>
            <value>
                <booleanValue>true</booleanValue>
            </value>
        </inputParameters>
        <inputParameters>
            <name>emailSubject</name>
            <value>
                <elementReference>InvoiceErrorEmailSubject</elementReference>
            </value>
        </inputParameters>
    </actionCalls>
    <actionCalls>
        <description>Send the email containing error information about the payment sale.</description>
        <name>SendPaymentSaleErrorEmail</name>
        <label>Send Payment Sale Error Email</label>
        <locationX>402</locationX>
        <locationY>4454</locationY>
        <actionName>emailSimple</actionName>
        <actionType>emailSimple</actionType>
        <connector>
            <targetReference>IterateOverInvoices</targetReference>
        </connector>
        <flowTransactionModel>CurrentTransaction</flowTransactionModel>
        <inputParameters>
            <name>emailBody</name>
            <value>
                <elementReference>EmailTemplateError</elementReference>
            </value>
        </inputParameters>
        <inputParameters>
            <name>emailAddresses</name>
            <value>
                <elementReference>$User.Email</elementReference>
            </value>
        </inputParameters>
        <inputParameters>
            <name>sendRichBody</name>
            <value>
                <booleanValue>true</booleanValue>
            </value>
        </inputParameters>
        <inputParameters>
            <name>emailSubject</name>
            <value>
                <elementReference>PaymentSaleErrorEmailSubject</elementReference>
            </value>
        </inputParameters>
    </actionCalls>
    <apiVersion>57.0</apiVersion>
    <assignments>
        <description>Collect the error messages.</description>
        <name>CollectCreateAssetOrderDtlEvtErrMsgs</name>
        <label>Collect Error Messages</label>
        <locationX>1906</locationX>
        <locationY>1574</locationY>
        <assignmentItems>
            <assignToReference>EmailErrorDetails</assignToReference>
            <operator>Assign</operator>
            <value>
                <elementReference>CreateAssetOrderDtlEvtErrCollection</elementReference>
            </value>
        </assignmentItems>
        <connector>
            <targetReference>IterateOverCreateAssetOrderDtlEvents</targetReference>
        </connector>
    </assignments>
    <assignments>
        <description>Add the error message records to the collection variable.</description>
        <name>CollectErrorMessage</name>
        <label>Collect Error Messages</label>
        <locationX>490</locationX>
        <locationY>4310</locationY>
        <assignmentItems>
            <assignToReference>EmailErrorDetails</assignToReference>
            <operator>Assign</operator>
            <value>
                <elementReference>InvoiceErrorCollection</elementReference>
            </value>
        </assignmentItems>
        <connector>
            <targetReference>IterateOverInvoiceErrors</targetReference>
        </connector>
    </assignments>
    <assignments>
        <description>Add the error message records to the collection variable.</description>
        <name>CollectErrorMessages</name>
        <label>Collect Error Messages</label>
        <locationX>1139</locationX>
        <locationY>2822</locationY>
        <assignmentItems>
            <assignToReference>EmailErrorDetails</assignToReference>
            <operator>Assign</operator>
            <value>
                <elementReference>BillingScheduleErrorCollection</elementReference>
            </value>
        </assignmentItems>
        <connector>
            <targetReference>IterateOverBillingScheduleEvents</targetReference>
        </connector>
    </assignments>
    <assignments>
        <description>Add the invoice error detail event records to the collection variable.</description>
        <name>CollectInvoiceErrorDetailEvent</name>
        <label>Collect Invoice Error Detail Event</label>
        <locationX>490</locationX>
        <locationY>3974</locationY>
        <assignmentItems>
            <assignToReference>InvoiceErrors</assignToReference>
            <operator>Add</operator>
            <value>
                <elementReference>IterateOverInvoiceErrorDetailEvents.InvoiceErrorDetailEvents</elementReference>
            </value>
        </assignmentItems>
        <connector>
            <targetReference>IterateOverInvoiceErrorDetailEvents</targetReference>
        </connector>
    </assignments>
    <assignments>
        <description>Add the invoice header error records to the collection variable.</description>
        <name>CollectInvoiceHeaderErrors</name>
        <label>Collect Invoice Header Errors</label>
        <locationX>402</locationX>
        <locationY>3614</locationY>
        <assignmentItems>
            <assignToReference>InvoiceErrors</assignToReference>
            <operator>Add</operator>
            <value>
                <elementReference>InvoiceProcessedEvent.InvoiceErrorDetailEvent</elementReference>
            </value>
        </assignmentItems>
        <connector>
            <targetReference>CollectInvoiceProcessedDetailEvents</targetReference>
        </connector>
    </assignments>
    <assignments>
        <description>Add the invoice processed detail events to the collection variable.</description>
        <name>CollectInvoiceProcessedDetailEvents</name>
        <label>Collect Invoice Processed Detail Events</label>
        <locationX>402</locationX>
        <locationY>3734</locationY>
        <assignmentItems>
            <assignToReference>InvoiceProcessedDetailEvent</assignToReference>
            <operator>Add</operator>
            <value>
                <elementReference>InvoiceProcessedEvent.InvoiceProcessedDetailEvents</elementReference>
            </value>
        </assignmentItems>
        <connector>
            <targetReference>IterateOverInvoiceErrorDetailEvents</targetReference>
        </connector>
    </assignments>
    <assignments>
        <description>Add the order product records to the collection variable.</description>
        <name>CollectOrderProductIDs</name>
        <label>Collect Order Product IDs</label>
        <locationX>1474</locationX>
        <locationY>2126</locationY>
        <assignmentItems>
            <assignToReference>OrderItemsIds</assignToReference>
            <operator>Add</operator>
            <value>
                <elementReference>IterateOverOrderProductsGetID.Id</elementReference>
            </value>
        </assignmentItems>
        <connector>
            <targetReference>IterateOverOrderProductsGetID</targetReference>
        </connector>
    </assignments>
    <assignments>
        <description>Add the order product records to the collection variable.</description>
        <name>CollectOrderProducts</name>
        <label>Collect Order Products</label>
        <locationX>2254</locationX>
        <locationY>638</locationY>
        <assignmentItems>
            <assignToReference>OrderItemsToBeCreated</assignToReference>
            <operator>Add</operator>
            <value>
                <elementReference>IterateOverOrderProductsAdd</elementReference>
            </value>
        </assignmentItems>
        <connector>
            <targetReference>IterateOverOrderProductsAdd</targetReference>
        </connector>
    </assignments>
    <assignments>
        <name>Set_Invoice_Id_on_Buy_Now</name>
        <label>Set Invoice Id on Buy Now</label>
        <locationX>138</locationX>
        <locationY>4454</locationY>
        <assignmentItems>
            <assignToReference>BuyNowComplete.Invoice_Id__c</assignToReference>
            <operator>Assign</operator>
            <value>
                <elementReference>GetInvoiceRecords_0.Id</elementReference>
            </value>
        </assignmentItems>
        <connector>
            <targetReference>Publish_Buy_Now_Complete_Event</targetReference>
        </connector>
    </assignments>
    <assignments>
        <name>Set_Original_Order_Id_on_Complete</name>
        <label>Set Original Order Id on Complete</label>
        <locationX>138</locationX>
        <locationY>4334</locationY>
        <assignmentItems>
            <assignToReference>BuyNowComplete.Original_Order_Id__c</assignToReference>
            <operator>Assign</operator>
            <value>
                <elementReference>recordId</elementReference>
            </value>
        </assignmentItems>
        <connector>
            <targetReference>Set_Invoice_Id_on_Buy_Now</targetReference>
        </connector>
    </assignments>
    <assignments>
        <name>SetEmailBodyBillingScheduleError</name>
        <label>Set Email Body</label>
        <locationX>1194</locationX>
        <locationY>3254</locationY>
        <assignmentItems>
            <assignToReference>EmailErrorBody</assignToReference>
            <operator>Assign</operator>
            <value>
                <elementReference>BillingScheduleErrorEmailBody</elementReference>
            </value>
        </assignmentItems>
        <connector>
            <targetReference>SendBillingScheduleErrorEmail</targetReference>
        </connector>
    </assignments>
    <assignments>
        <name>SetEmailBodyInvoiceError</name>
        <label>Set Email Body</label>
        <locationX>402</locationX>
        <locationY>4526</locationY>
        <assignmentItems>
            <assignToReference>EmailErrorBody</assignToReference>
            <operator>Assign</operator>
            <value>
                <elementReference>InvoiceErrorEmailBody</elementReference>
            </value>
        </assignmentItems>
        <connector>
            <targetReference>SendInvoiceErrorEmail</targetReference>
        </connector>
    </assignments>
    <assignments>
        <name>SetEmailBodyPaymentSaleError</name>
        <label>Set Email Body</label>
        <locationX>402</locationX>
        <locationY>4334</locationY>
        <assignmentItems>
            <assignToReference>EmailErrorBody</assignToReference>
            <operator>Assign</operator>
            <value>
                <elementReference>PaymentSaleErrorEmailBody</elementReference>
            </value>
        </assignmentItems>
        <connector>
            <targetReference>SendPaymentSaleErrorEmail</targetReference>
        </connector>
    </assignments>
    <assignments>
        <description>Sets the EmailErrorDetails variable which is used in the email template.</description>
        <name>SetEmailErrorDetailsPaymentSale</name>
        <label>Set Email Error Details</label>
        <locationX>402</locationX>
        <locationY>4214</locationY>
        <assignmentItems>
            <assignToReference>EmailErrorDetails</assignToReference>
            <operator>Assign</operator>
            <value>
                <elementReference>PaymentCreationEvent.ErrorMessage</elementReference>
            </value>
        </assignmentItems>
        <connector>
            <targetReference>SetEmailBodyPaymentSaleError</targetReference>
        </connector>
    </assignments>
    <assignments>
        <description>Required. Set the ID of the payment gateway provider to use for this transaction.</description>
        <name>SetPaymentGatewayID</name>
        <label>Set Payment Gateway ID</label>
        <locationX>2166</locationX>
        <locationY>158</locationY>
        <assignmentItems>
            <assignToReference>GatewayId</assignToReference>
            <operator>Assign</operator>
            <value>
                <elementReference>GatewayId</elementReference>
            </value>
        </assignmentItems>
        <connector>
            <targetReference>GetOrderOutputFields</targetReference>
        </connector>
    </assignments>
    <assignments>
        <description>Create the body of the email to contain the error messages.</description>
        <name>SetupEmailBodyAssetOrderError</name>
        <label>Set Error Email Body</label>
        <locationX>1986</locationX>
        <locationY>2006</locationY>
        <assignmentItems>
            <assignToReference>EmailErrorBody</assignToReference>
            <operator>Assign</operator>
            <value>
                <elementReference>AssetOrderErrorEmailBody</elementReference>
            </value>
        </assignmentItems>
        <connector>
            <targetReference>SendAssetOrderErrorEmail</targetReference>
        </connector>
    </assignments>
    <decisions>
        <description>Determine whether an error occurred during the creation of the asset.</description>
        <name>AssetCreationFailed</name>
        <label>Asset Creation Failed?</label>
        <locationX>2038</locationX>
        <locationY>1454</locationY>
        <defaultConnector>
            <targetReference>IterateOverCreateAssetOrderDtlEvents</targetReference>
        </defaultConnector>
        <defaultConnectorLabel>Default Outcome</defaultConnectorLabel>
        <rules>
            <name>AssetCreationFailure</name>
            <conditionLogic>and</conditionLogic>
            <conditions>
                <leftValueReference>IterateOverCreateAssetOrderDtlEvents.IsSuccess</leftValueReference>
                <operator>EqualTo</operator>
                <rightValue>
                    <booleanValue>false</booleanValue>
                </rightValue>
            </conditions>
            <connector>
                <targetReference>CollectCreateAssetOrderDtlEvtErrMsgs</targetReference>
            </connector>
            <label>Yes</label>
        </rules>
    </decisions>
    <decisions>
        <description>Determine whether an error occurred during the creation of the assets.</description>
        <name>AssetsHaveErrors</name>
        <label>Assets Have Errors?</label>
        <locationX>1818</locationX>
        <locationY>1886</locationY>
        <defaultConnectorLabel>Default Outcome</defaultConnectorLabel>
        <rules>
            <name>AssetSuccess</name>
            <conditionLogic>and</conditionLogic>
            <conditions>
                <leftValueReference>EmailErrorDetails</leftValueReference>
                <operator>IsNull</operator>
                <rightValue>
                    <booleanValue>true</booleanValue>
                </rightValue>
            </conditions>
            <connector>
                <targetReference>IterateOverOrderProductsGetID</targetReference>
            </connector>
            <label>No</label>
        </rules>
        <rules>
            <name>AssetFailure</name>
            <conditionLogic>and</conditionLogic>
            <conditions>
                <leftValueReference>EmailErrorDetails</leftValueReference>
                <operator>IsNull</operator>
                <rightValue>
                    <booleanValue>false</booleanValue>
                </rightValue>
            </conditions>
            <connector>
                <targetReference>SetupEmailBodyAssetOrderError</targetReference>
            </connector>
            <label>Yes</label>
        </rules>
    </decisions>
    <decisions>
        <description>Determine whether an error occurred during the creation of the billing schedule.</description>
        <name>BillingScheduleErrorCheck</name>
        <label>Billing Schedule Has Error?</label>
        <locationX>1051</locationX>
        <locationY>3134</locationY>
        <defaultConnectorLabel>Default Outcome</defaultConnectorLabel>
        <rules>
            <name>BillingScheduleSuccess</name>
            <conditionLogic>and</conditionLogic>
            <conditions>
                <leftValueReference>EmailErrorDetails</leftValueReference>
                <operator>IsNull</operator>
                <rightValue>
                    <booleanValue>true</booleanValue>
                </rightValue>
            </conditions>
            <connector>
                <targetReference>CreateInvoice</targetReference>
            </connector>
            <label>No</label>
        </rules>
        <rules>
            <name>BillingScheduleErrorExists</name>
            <conditionLogic>and</conditionLogic>
            <conditions>
                <leftValueReference>EmailErrorDetails</leftValueReference>
                <operator>IsNull</operator>
                <rightValue>
                    <booleanValue>false</booleanValue>
                </rightValue>
            </conditions>
            <connector>
                <targetReference>SetEmailBodyBillingScheduleError</targetReference>
            </connector>
            <label>Yes</label>
        </rules>
    </decisions>
    <decisions>
        <description>Determine whether an error occurred during the creation of the billing schedule.</description>
        <name>BillingScheduleHasError</name>
        <label>Has Error?</label>
        <locationX>1271</locationX>
        <locationY>2702</locationY>
        <defaultConnector>
            <targetReference>IterateOverBillingScheduleEvents</targetReference>
        </defaultConnector>
        <defaultConnectorLabel>Default Outcome</defaultConnectorLabel>
        <rules>
            <name>BillingScheduleContainsError</name>
            <conditionLogic>and</conditionLogic>
            <conditions>
                <leftValueReference>IterateOverBillingScheduleEvents.IsSuccess</leftValueReference>
                <operator>EqualTo</operator>
                <rightValue>
                    <booleanValue>false</booleanValue>
                </rightValue>
            </conditions>
            <connector>
                <targetReference>CollectErrorMessages</targetReference>
            </connector>
            <label>Yes</label>
        </rules>
    </decisions>
    <decisions>
        <description>Determine whether an error occurred during the creation of the invoice.</description>
        <name>InvoiceHasError</name>
        <label>Invoice Has Error?</label>
        <locationX>358</locationX>
        <locationY>3494</locationY>
        <defaultConnectorLabel>Default Outcome</defaultConnectorLabel>
        <rules>
            <name>InvoiceSuccess</name>
            <conditionLogic>and</conditionLogic>
            <conditions>
                <leftValueReference>InvoiceProcessedEvent.IsSuccess</leftValueReference>
                <operator>EqualTo</operator>
                <rightValue>
                    <booleanValue>true</booleanValue>
                </rightValue>
            </conditions>
            <connector>
                <targetReference>IterateOverInvoices</targetReference>
            </connector>
            <label>No</label>
        </rules>
        <rules>
            <name>InvoiceError</name>
            <conditionLogic>and</conditionLogic>
            <conditions>
                <leftValueReference>InvoiceProcessedEvent.IsSuccess</leftValueReference>
                <operator>EqualTo</operator>
                <rightValue>
                    <booleanValue>false</booleanValue>
                </rightValue>
            </conditions>
            <connector>
                <targetReference>CollectInvoiceHeaderErrors</targetReference>
            </connector>
            <label>Yes</label>
        </rules>
    </decisions>
    <decisions>
        <description>Determine whether an error occurred during the creation of the payment sale.</description>
        <name>PaymentSaleErrorCheck</name>
        <label>Has Error?</label>
        <locationX>402</locationX>
        <locationY>4094</locationY>
        <defaultConnectorLabel>Default Outcome</defaultConnectorLabel>
        <rules>
            <name>PaymentSaleSuccess</name>
            <conditionLogic>and</conditionLogic>
            <conditions>
                <leftValueReference>PaymentCreationEvent.IsSuccess</leftValueReference>
                <operator>EqualTo</operator>
                <rightValue>
                    <booleanValue>true</booleanValue>
                </rightValue>
            </conditions>
            <connector>
                <targetReference>ApplyPaymentToInvoice</targetReference>
            </connector>
            <label>No</label>
        </rules>
        <rules>
            <name>PaymentSaleError</name>
            <conditionLogic>and</conditionLogic>
            <conditions>
                <leftValueReference>PaymentCreationEvent.IsSuccess</leftValueReference>
                <operator>EqualTo</operator>
                <rightValue>
                    <booleanValue>false</booleanValue>
                </rightValue>
            </conditions>
            <connector>
                <targetReference>SetEmailErrorDetailsPaymentSale</targetReference>
            </connector>
            <label>Yes</label>
        </rules>
    </decisions>
    <formulas>
        <name>AssetOrderErrorEmailBody</name>
        <dataType>String</dataType>
        <expression>&quot;A Salesforce Flow didn&apos;t complete, because it could not create the assets:&quot;</expression>
    </formulas>
    <formulas>
        <name>AssetOrderErrorEmailSubject</name>
        <dataType>String</dataType>
        <expression>&quot;A Salesforce Flow didn&apos;t complete: Assets could not be created&quot;</expression>
    </formulas>
    <formulas>
        <description>Collects billing schedule errors.</description>
        <name>BillingScheduleErrorCollection</name>
        <dataType>String</dataType>
        <expression>{!EmailErrorDetails} &amp; {!IterateOverBillingScheduleEvents.ErrorMessage}</expression>
    </formulas>
    <formulas>
        <description>Email body for billing schedule error case.</description>
        <name>BillingScheduleErrorEmailBody</name>
        <dataType>String</dataType>
        <expression>&quot;The following errors prevented Salesforce Billing from completing order &quot; + {!orderOutput.OrderNumber}</expression>
    </formulas>
    <formulas>
        <description>Email subject for billing schedule error case.</description>
        <name>BillingScheduleErrorEmailSubject</name>
        <dataType>String</dataType>
        <expression>&quot;Salesforce Billing order &quot; + {!orderOutput.OrderNumber} + &quot; wasn’t completed&quot;</expression>
    </formulas>
    <formulas>
        <description>Collects invoice errors.</description>
        <name>InvoiceErrorCollection</name>
        <dataType>String</dataType>
        <expression>{!EmailErrorDetails} &amp; {!IterateOverInvoiceErrors.ErrorMessage}</expression>
    </formulas>
    <formulas>
        <description>Email body for invoice error case.</description>
        <name>InvoiceErrorEmailBody</name>
        <dataType>String</dataType>
        <expression>&quot;Salesforce invoice contains error&quot;</expression>
    </formulas>
    <formulas>
        <description>Email subject for invoice error case.</description>
        <name>InvoiceErrorEmailSubject</name>
        <dataType>String</dataType>
        <expression>&quot;Salesforce invoice contains errors&quot;</expression>
    </formulas>
    <formulas>
        <description>Email body for payment sale error case.</description>
        <name>PaymentSaleErrorEmailBody</name>
        <dataType>String</dataType>
        <expression>&quot;Salesforce Payment Sale for invoice &quot; + {!GetInvoiceRecords_0.DocumentNumber}  + &quot; wasn’t completed&quot;</expression>
    </formulas>
    <formulas>
        <description>Email subject for payment sale error case.</description>
        <name>PaymentSaleErrorEmailSubject</name>
        <dataType>String</dataType>
        <expression>&quot;Salesforce Payment Sale for Invoice &quot; + {!GetInvoiceRecords_0.InvoiceNumber} + &quot; wasn’t completed&quot;</expression>
    </formulas>
    <interviewLabel>Buy Now Pilot Existing Order {!$Flow.CurrentDateTime}</interviewLabel>
    <label>Buy Now Pilot Existing Order</label>
    <loops>
        <description>Loop through the event detail records for the Billing Schedule Created Event. Check for errors and other messages.</description>
        <name>IterateOverBillingScheduleEvents</name>
        <label>Iterate Over Billing Schedule Events</label>
        <locationX>1051</locationX>
        <locationY>2582</locationY>
        <collectionReference>BillingScheduleCreatedEvent.BillingScheduleCreatedEventDetail</collectionReference>
        <iterationOrder>Asc</iterationOrder>
        <nextValueConnector>
            <targetReference>BillingScheduleHasError</targetReference>
        </nextValueConnector>
        <noMoreValuesConnector>
            <targetReference>BillingScheduleErrorCheck</targetReference>
        </noMoreValuesConnector>
    </loops>
    <loops>
        <description>Loop through the event detail records for the Create Asset Order Event. Check for errors and other messages.</description>
        <name>IterateOverCreateAssetOrderDtlEvents</name>
        <label>Iterate Over Create Asset Order Detail Events</label>
        <locationX>1818</locationX>
        <locationY>1334</locationY>
        <collectionReference>CreateAssetOrderEvent.AssetDetails</collectionReference>
        <iterationOrder>Asc</iterationOrder>
        <nextValueConnector>
            <targetReference>AssetCreationFailed</targetReference>
        </nextValueConnector>
        <noMoreValuesConnector>
            <targetReference>AssetsHaveErrors</targetReference>
        </noMoreValuesConnector>
    </loops>
    <loops>
        <description>Loop through the invoice error detail event records.</description>
        <name>IterateOverInvoiceErrorDetailEvents</name>
        <label>Iterate Over Invoice Error Detail Events</label>
        <locationX>402</locationX>
        <locationY>3854</locationY>
        <collectionReference>InvoiceProcessedDetailEvent</collectionReference>
        <iterationOrder>Asc</iterationOrder>
        <nextValueConnector>
            <targetReference>CollectInvoiceErrorDetailEvent</targetReference>
        </nextValueConnector>
        <noMoreValuesConnector>
            <targetReference>IterateOverInvoiceErrors</targetReference>
        </noMoreValuesConnector>
    </loops>
    <loops>
        <description>Loop through the list of invoice errors and collect the error messages into a single variable.</description>
        <name>IterateOverInvoiceErrors</name>
        <label>Iterate Over Invoice Errors</label>
        <locationX>402</locationX>
        <locationY>4190</locationY>
        <collectionReference>InvoiceErrors</collectionReference>
        <iterationOrder>Asc</iterationOrder>
        <nextValueConnector>
            <targetReference>CollectErrorMessage</targetReference>
        </nextValueConnector>
        <noMoreValuesConnector>
            <targetReference>SetEmailBodyInvoiceError</targetReference>
        </noMoreValuesConnector>
    </loops>
    <loops>
        <description>Loop through the list of invoices and create the payment sale records.</description>
        <name>IterateOverInvoices</name>
        <label>Iterate Over Invoices</label>
        <locationX>50</locationX>
        <locationY>3614</locationY>
        <collectionReference>InvoiceProcessedEvent.InvoiceProcessedDetailEvents</collectionReference>
        <iterationOrder>Asc</iterationOrder>
        <nextValueConnector>
            <targetReference>GetInvoiceRecords_0</targetReference>
        </nextValueConnector>
    </loops>
    <loops>
        <description>Loop through the list of order products and add them to the order.</description>
        <name>IterateOverOrderProductsAdd</name>
        <label>Iterate Over Order Products</label>
        <locationX>2166</locationX>
        <locationY>518</locationY>
        <collectionReference>orderItems</collectionReference>
        <iterationOrder>Asc</iterationOrder>
        <nextValueConnector>
            <targetReference>CollectOrderProducts</targetReference>
        </nextValueConnector>
        <noMoreValuesConnector>
            <targetReference>Update_Order_Items</targetReference>
        </noMoreValuesConnector>
    </loops>
    <loops>
        <description>Loop through the order products and copy the order product ID to a new variable.</description>
        <name>IterateOverOrderProductsGetID</name>
        <label>Iterate Over Order Products</label>
        <locationX>1386</locationX>
        <locationY>2006</locationY>
        <collectionReference>OrderItemsToBeCreated</collectionReference>
        <iterationOrder>Asc</iterationOrder>
        <nextValueConnector>
            <targetReference>CollectOrderProductIDs</targetReference>
        </nextValueConnector>
        <noMoreValuesConnector>
            <targetReference>CreateBillingSchedulesfromOrderProducts</targetReference>
        </noMoreValuesConnector>
    </loops>
    <processMetadataValues>
        <name>BuilderType</name>
        <value>
            <stringValue>LightningFlowBuilder</stringValue>
        </value>
    </processMetadataValues>
    <processMetadataValues>
        <name>CanvasMode</name>
        <value>
            <stringValue>AUTO_LAYOUT_CANVAS</stringValue>
        </value>
    </processMetadataValues>
    <processType>AutoLaunchedFlow</processType>
    <recordCreates>
        <name>Publish_Buy_Now_Complete_Event</name>
        <label>Publish Buy Now Complete Event</label>
        <locationX>138</locationX>
        <locationY>4574</locationY>
        <connector>
            <targetReference>SendCompletedEmail</targetReference>
        </connector>
        <inputReference>BuyNowComplete</inputReference>
    </recordCreates>
    <recordLookups>
        <name>Get_Order_Products_From_Order</name>
        <label>Get Order Products From Order</label>
        <locationX>2166</locationX>
        <locationY>398</locationY>
        <assignNullValuesIfNoRecordsFound>false</assignNullValuesIfNoRecordsFound>
        <connector>
            <targetReference>IterateOverOrderProductsAdd</targetReference>
        </connector>
        <filterLogic>and</filterLogic>
        <filters>
            <field>OrderId</field>
            <operator>EqualTo</operator>
            <value>
                <elementReference>recordId</elementReference>
            </value>
        </filters>
        <object>OrderItem</object>
        <outputReference>orderItems</outputReference>
        <queriedFields>Id</queriedFields>
        <queriedFields>OrderActionId</queriedFields>
    </recordLookups>
    <recordLookups>
        <description>Get the invoice records.</description>
        <name>GetInvoiceRecords_0</name>
        <label>Get Invoice Records</label>
        <locationX>666</locationX>
        <locationY>3734</locationY>
        <assignNullValuesIfNoRecordsFound>false</assignNullValuesIfNoRecordsFound>
        <connector>
            <targetReference>ChargePaymentMethod</targetReference>
        </connector>
        <filterLogic>and</filterLogic>
        <filters>
            <field>Id</field>
            <operator>EqualTo</operator>
            <value>
                <elementReference>IterateOverInvoices.InvoiceId</elementReference>
            </value>
        </filters>
        <getFirstRecordOnly>true</getFirstRecordOnly>
        <object>Invoice</object>
        <storeOutputAutomatically>true</storeOutputAutomatically>
    </recordLookups>
    <recordLookups>
        <description>Get the order ID and the order number from the order that was created.</description>
        <name>GetOrderOutputFields</name>
        <label>Get Order Output Fields</label>
        <locationX>2166</locationX>
        <locationY>278</locationY>
        <assignNullValuesIfNoRecordsFound>false</assignNullValuesIfNoRecordsFound>
        <connector>
            <targetReference>Get_Order_Products_From_Order</targetReference>
        </connector>
        <filterLogic>and</filterLogic>
        <filters>
            <field>Id</field>
            <operator>EqualTo</operator>
            <value>
                <elementReference>recordId</elementReference>
            </value>
        </filters>
        <object>Order</object>
        <outputReference>orderOutput</outputReference>
        <queriedFields>Id</queriedFields>
        <queriedFields>OrderNumber</queriedFields>
        <queriedFields>EffectiveDate</queriedFields>
        <queriedFields>AccountId</queriedFields>
    </recordLookups>
    <recordUpdates>
        <description>Activate the order.</description>
        <name>ActivateOrder</name>
        <label>Activate Order</label>
        <locationX>2166</locationX>
        <locationY>974</locationY>
        <connector>
            <targetReference>CreateAssetsFromOrder</targetReference>
        </connector>
        <filterLogic>and</filterLogic>
        <filters>
            <field>Id</field>
            <operator>EqualTo</operator>
            <value>
                <elementReference>recordId</elementReference>
            </value>
        </filters>
        <inputAssignments>
            <field>Status</field>
            <value>
                <stringValue>Activated</stringValue>
            </value>
        </inputAssignments>
        <object>Order</object>
    </recordUpdates>
    <recordUpdates>
        <name>Update_Order_Items</name>
        <label>Update Order Items</label>
        <locationX>2166</locationX>
        <locationY>854</locationY>
        <connector>
            <targetReference>ActivateOrder</targetReference>
        </connector>
        <inputReference>orderItems</inputReference>
    </recordUpdates>
    <runInMode>SystemModeWithoutSharing</runInMode>
    <sourceTemplate>revenue_buynow__BuyNow</sourceTemplate>
    <start>
        <locationX>2040</locationX>
        <locationY>0</locationY>
        <connector>
            <targetReference>SetPaymentGatewayID</targetReference>
        </connector>
    </start>
    <status>Active</status>
    <textTemplates>
        <name>CreateAssetOrderDtlEvtErrCollection</name>
        <isViewedAsPlainText>false</isViewedAsPlainText>
        <text>&lt;p&gt;{!EmailErrorDetails}&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;{!IterateOverCreateAssetOrderDtlEvents.OrderItem.Product2.Name} : &lt;/p&gt;&lt;p&gt;{!IterateOverCreateAssetOrderDtlEvents.ErrorCode}: {!IterateOverCreateAssetOrderDtlEvents.ErrorMessage}&lt;/p&gt;</text>
    </textTemplates>
    <textTemplates>
        <description>Email body for when Buy Now completes without error.</description>
        <name>EmailTemplateCompleted</name>
        <isViewedAsPlainText>false</isViewedAsPlainText>
        <text>&lt;span style=&quot;background-color: rgb(255, 255, 255); color: rgb(68, 68, 68); font-size: 14px;&quot;&gt;Hello {!$User.FirstName} {!$User.LastName},&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span style=&quot;color: rgb(68, 68, 68); font-size: 14px;&quot;&gt;Your order has been placed successfully. It created the following.&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;ul&gt;&lt;li&gt;&lt;span style=&quot;color: rgb(68, 68, 68); font-size: 14px;&quot;&gt;Order {!orderOutput.OrderNumber}&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;color: rgb(68, 68, 68); font-size: 14px;&quot;&gt;Invoice {!IterateOverInvoices.Invoice.DocumentNumber}&lt;/span&gt;&lt;/li&gt;&lt;li&gt;&lt;span style=&quot;color: rgb(68, 68, 68); font-size: 14px;&quot;&gt;Payment {!PaymentCreationEvent.Payment.PaymentNumber}&lt;/span&gt;&lt;/li&gt;&lt;/ul&gt;&lt;br&gt;&lt;span style=&quot;color: rgb(68, 68, 68); font-size: 14px;&quot;&gt;Thank you,&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span style=&quot;color: rgb(68, 68, 68); font-size: 14px;&quot;&gt;Salesforce Process Automation&lt;/span&gt;&lt;br&gt;&lt;br&gt;&lt;span style=&quot;color: rgb(68, 68, 68); font-size: 14px;&quot;&gt;Questions? Need help? Contact Salesforce Customer Support.&lt;/span&gt;&lt;br&gt;&lt;span style=&quot;background-color: rgb(255, 255, 255); color: rgb(68, 68, 68); font-size: 14px;&quot;&gt;&amp;lt;&lt;/span&gt;&lt;a href=&quot;https://help.salesforce.com/mysuccesshub?id=solutionFinder&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot; style=&quot;color: rgb(1, 118, 211); font-size: 14px;&quot;&gt;https://help.salesforce.com/mysuccesshub?id=solutionFinder&lt;/a&gt;&lt;span style=&quot;color: rgb(68, 68, 68); font-size: 14px;&quot;&gt;&amp;gt;&lt;/span&gt;</text>
    </textTemplates>
    <textTemplates>
        <description>Email body for when Buy Now has an error.</description>
        <name>EmailTemplateError</name>
        <isViewedAsPlainText>false</isViewedAsPlainText>
        <text>&lt;p&gt;&lt;span style=&quot;color: rgb(0, 0, 0);&quot;&gt;Hello, {!$User.FirstName} {!$User.LastName},&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;{!EmailErrorBody}&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;color: rgb(0, 0, 0);&quot;&gt;{!EmailErrorDetails}&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;color: rgb(0, 0, 0);&quot;&gt;&lt;span class=&quot;ql-cursor&quot;&gt;﻿&lt;/span&gt;Thank you,&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;color: rgb(0, 0, 0);&quot;&gt;Salesforce Process Automation&lt;/span&gt;&lt;/p&gt;&lt;p&gt;&lt;br&gt;&lt;/p&gt;&lt;p&gt;&lt;span style=&quot;color: rgb(0, 0, 0);&quot;&gt;You’re registered as {!$User.Username} in {!$Organization.Name}. Questions? Need help? Contact Salesforce Customer Support. &amp;lt;&lt;/span&gt;&lt;a href=&quot;https://help.salesforce.com/mysuccesshub?id=solutionFinder&quot; rel=&quot;noopener noreferrer&quot; target=&quot;_blank&quot; style=&quot;color: rgb(0, 0, 0);&quot;&gt;https://help.salesforce.com/mysuccesshub?id=solutionFinder&lt;/a&gt;&lt;span style=&quot;color: rgb(0, 0, 0);&quot;&gt;&amp;gt;&lt;/span&gt;&lt;/p&gt;</text>
    </textTemplates>
    <variables>
        <name>BillingScheduleCreatedEvent</name>
        <dataType>SObject</dataType>
        <isCollection>false</isCollection>
        <isInput>false</isInput>
        <isOutput>false</isOutput>
        <objectType>BillingScheduleCreatedEvent</objectType>
    </variables>
    <variables>
        <name>BuyNowComplete</name>
        <dataType>SObject</dataType>
        <isCollection>false</isCollection>
        <isInput>false</isInput>
        <isOutput>true</isOutput>
        <objectType>BuyNowComplete__e</objectType>
    </variables>
    <variables>
        <name>CreateAssetOrderDtlEventErrors</name>
        <dataType>String</dataType>
        <isCollection>false</isCollection>
        <isInput>false</isInput>
        <isOutput>false</isOutput>
        <value>
            <elementReference>IterateOverCreateAssetOrderDtlEvents.ErrorMessage</elementReference>
        </value>
    </variables>
    <variables>
        <name>CreateAssetOrderEvent</name>
        <dataType>SObject</dataType>
        <isCollection>false</isCollection>
        <isInput>false</isInput>
        <isOutput>false</isOutput>
        <objectType>CreateAssetOrderEvent</objectType>
    </variables>
    <variables>
        <name>EmailErrorBody</name>
        <dataType>String</dataType>
        <isCollection>false</isCollection>
        <isInput>false</isInput>
        <isOutput>false</isOutput>
    </variables>
    <variables>
        <name>EmailErrorDetails</name>
        <dataType>String</dataType>
        <isCollection>false</isCollection>
        <isInput>false</isInput>
        <isOutput>false</isOutput>
    </variables>
    <variables>
        <name>GatewayId</name>
        <dataType>String</dataType>
        <isCollection>false</isCollection>
        <isInput>true</isInput>
        <isOutput>false</isOutput>
    </variables>
    <variables>
        <name>InvoiceErrors</name>
        <dataType>SObject</dataType>
        <isCollection>true</isCollection>
        <isInput>false</isInput>
        <isOutput>false</isOutput>
        <objectType>InvoiceErrorDetailEvent</objectType>
    </variables>
    <variables>
        <name>invoiceIds</name>
        <dataType>String</dataType>
        <isCollection>true</isCollection>
        <isInput>false</isInput>
        <isOutput>false</isOutput>
    </variables>
    <variables>
        <name>InvoiceProcessedDetailEvent</name>
        <dataType>SObject</dataType>
        <isCollection>true</isCollection>
        <isInput>false</isInput>
        <isOutput>false</isOutput>
        <objectType>InvoiceProcessedDetailEvent</objectType>
    </variables>
    <variables>
        <name>InvoiceProcessedEvent</name>
        <dataType>SObject</dataType>
        <isCollection>false</isCollection>
        <isInput>false</isInput>
        <isOutput>false</isOutput>
        <objectType>InvoiceProcessedEvent</objectType>
    </variables>
    <variables>
        <name>orderItems</name>
        <dataType>SObject</dataType>
        <isCollection>true</isCollection>
        <isInput>true</isInput>
        <isOutput>false</isOutput>
        <objectType>OrderItem</objectType>
    </variables>
    <variables>
        <name>OrderItemsIds</name>
        <dataType>String</dataType>
        <isCollection>true</isCollection>
        <isInput>false</isInput>
        <isOutput>false</isOutput>
    </variables>
    <variables>
        <name>OrderItemsToBeCreated</name>
        <dataType>SObject</dataType>
        <isCollection>true</isCollection>
        <isInput>false</isInput>
        <isOutput>false</isOutput>
        <objectType>OrderItem</objectType>
    </variables>
    <variables>
        <name>orderOutput</name>
        <dataType>SObject</dataType>
        <isCollection>false</isCollection>
        <isInput>false</isInput>
        <isOutput>true</isOutput>
        <objectType>Order</objectType>
    </variables>
    <variables>
        <name>PaymentCreationEvent</name>
        <dataType>SObject</dataType>
        <isCollection>false</isCollection>
        <isInput>false</isInput>
        <isOutput>false</isOutput>
        <objectType>PaymentCreationEvent</objectType>
    </variables>
    <variables>
        <name>paymentMethodId</name>
        <dataType>String</dataType>
        <isCollection>false</isCollection>
        <isInput>true</isInput>
        <isOutput>false</isOutput>
    </variables>
    <variables>
        <name>recordId</name>
        <dataType>String</dataType>
        <isCollection>false</isCollection>
        <isInput>true</isInput>
        <isOutput>true</isOutput>
    </variables>
    <waits>
        <description>Billing schedule creation is asynchronous. Wait until the Flow receives the Billing Schedule Created event, which indicates that Salesforce finished processing the billing schedule request.</description>
        <name>WaitForBillingScheduleCreatedEvent</name>
        <label>Wait For Billing Schedule Created Event</label>
        <locationX>1386</locationX>
        <locationY>2462</locationY>
        <defaultConnectorLabel>Default Path</defaultConnectorLabel>
        <waitEvents>
            <name>BillingScheduleComplete</name>
            <conditionLogic>and</conditionLogic>
            <connector>
                <targetReference>IterateOverBillingScheduleEvents</targetReference>
            </connector>
            <eventType>BillingScheduleCreatedEvent</eventType>
            <inputParameters>
                <name>RequestIdentifier</name>
                <value>
                    <elementReference>CreateBillingSchedulesfromOrderProducts.requestId</elementReference>
                </value>
            </inputParameters>
            <label>Complete</label>
            <outputParameters>
                <assignToReference>BillingScheduleCreatedEvent</assignToReference>
                <name>BillingScheduleCreatedEvent</name>
            </outputParameters>
        </waitEvents>
    </waits>
    <waits>
        <description>Asset creation is asynchronous. Wait until the Flow receives the Create Asset Order event, which is published when Salesforce finishes processing the request.</description>
        <name>WaitForCreateAssetOrderEvent</name>
        <label>Wait For Create Asset Order Event</label>
        <locationX>2166</locationX>
        <locationY>1214</locationY>
        <defaultConnectorLabel>Default Path</defaultConnectorLabel>
        <waitEvents>
            <name>OrderAssetComplete</name>
            <conditionLogic>and</conditionLogic>
            <connector>
                <targetReference>IterateOverCreateAssetOrderDtlEvents</targetReference>
            </connector>
            <eventType>CreateAssetOrderEvent</eventType>
            <inputParameters>
                <name>RequestIdentifier</name>
                <value>
                    <elementReference>CreateAssetsFromOrder.requestId</elementReference>
                </value>
            </inputParameters>
            <label>Complete</label>
            <outputParameters>
                <assignToReference>CreateAssetOrderEvent</assignToReference>
                <name>CreateAssetOrderEvent</name>
            </outputParameters>
        </waitEvents>
    </waits>
    <waits>
        <description>Invoice processing is asynchronous. Wait until the Flow receives the Invoice Processed event, which indicates that Salesforce finished processing the invoice creation request.</description>
        <name>WaitForInvoiceProcessedEvent</name>
        <label>Wait For Invoice Processed Event</label>
        <locationX>644</locationX>
        <locationY>3374</locationY>
        <defaultConnectorLabel>Default Path</defaultConnectorLabel>
        <waitEvents>
            <name>InvoiceComplete</name>
            <conditionLogic>and</conditionLogic>
            <connector>
                <targetReference>InvoiceHasError</targetReference>
            </connector>
            <eventType>InvoiceProcessedEvent</eventType>
            <inputParameters>
                <name>CorrelationIdentifier</name>
                <value>
                    <elementReference>$Flow.InterviewGuid</elementReference>
                </value>
            </inputParameters>
            <label>Complete</label>
            <outputParameters>
                <assignToReference>InvoiceProcessedEvent</assignToReference>
                <name>InvoiceProcessedEvent</name>
            </outputParameters>
        </waitEvents>
    </waits>
    <waits>
        <description>Creating the payment is an asynchronous process. Wait until the Flow receives the Payment Creation event, which indicates that Salesforce finished processing the payment request.</description>
        <name>WaitForPaymentCreationEvent</name>
        <label>Wait For Payment Creation Event</label>
        <locationX>666</locationX>
        <locationY>3974</locationY>
        <defaultConnectorLabel>Default Path</defaultConnectorLabel>
        <waitEvents>
            <name>PaymentSaleComplete</name>
            <conditionLogic>and</conditionLogic>
            <connector>
                <targetReference>PaymentSaleErrorCheck</targetReference>
            </connector>
            <eventType>PaymentCreationEvent</eventType>
            <inputParameters>
                <name>RequestIdentifier</name>
                <value>
                    <elementReference>ChargePaymentMethod.requestId</elementReference>
                </value>
            </inputParameters>
            <label>Complete</label>
            <outputParameters>
                <assignToReference>PaymentCreationEvent</assignToReference>
                <name>PaymentCreationEvent</name>
            </outputParameters>
        </waitEvents>
    </waits>
</Flow>
